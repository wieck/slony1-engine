#+OPTIONS: ^:{}
* Slony-I Release Notes
** 2.2.0 (beta 1)
*** Significant New Features
    - Switch to use COPY protocol for handling sl_log_* data

     Since the schema of tables ~sl_log_1~ and ~sl_log_2~ are changing
     substantially, capturing somewhat different information, there is
     no way provided to convert old log data to use the new schema.
     As a consequence, at the time of upgrade, it is essential that
     these tables be empty.

	 They need to /already/ be empty, as the ~upgradeSchema()~
	 function runs locally on each node, and there is no readily
	 available mechanism to recover from the problem of discovering
	 that one node still has data that needs to be applied against
	 another node.  We may make some /best efforts/ to prevent
	 problems, but there is only limited cross-node coordination that
	 may readily be done.

     We intend to offer several mechanisms to help this to happen,
     including:

     - Preventing new log entries via ~LOCK SET~ :: It is recommended
          that administrators /prevent/ data from being added to the
          logs accidentally by locking all replication sets using [[http://slony.info/documentation/2.1/stmtlockset.html][LOCK
          SET]], then unlock them via ~UNLOCK SET~ afterwards. For
          systems with enormous numbers of replicated tables (/e.g./ -
          on the order of thousands), this requires taking out
          exclusive locks on all of them, as ~LOCK SET~ and ~UNLOCK
          SET~ both need to submit an ~ALTER TABLE~ request against
          each table in order to add/drop the "lock" trigger, and may
          prove too expensive.

     - Preventing new log entries via ~pg_hba.conf~ :: If ~LOCK SET~
          is too expensive, an administrator may prefer to lock out
          all application users during the upgrade process.
          ~pg_hba.conf~ is useful for this.  The process would
          involve:
	   - Altering ~pg_hba.conf~ to contain entries denying access to
         all other than the ~slony~ user
	   - Submitting ~SIGHUP~ signal to the Postgres backend so new
         connections are rejected
	   - Verifying, via query to ~pg_stat_activity~, that there are no
          users other than the ~slony~ user connected

     - Script to drain log tables ~sl_log_1~ and ~sl_log_2~ :: It runs
       the following logic against each node:
	   - Calls the function ~cleanupEvent()~ to clean out any log
         entries that are safe to delete
	   - Verify that log tables ~sl_log_1~ and ~sl_log_2~ are empty
	   
	  Once this script has run against all nodes, reporting that
          the log tables are empty on each node, it is safe to upgrade
          the schema for these tables.  If some nodes are not ready,
          it will be necessary to keep ~slon~ processes running to
          apply the outstanding log entries, and so that confirmations
          are passed back to all nodes in order that the cleanup can
          be finalized.
